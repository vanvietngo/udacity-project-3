version: 2.1
environment:
  CIRCLE_PROJECT_REPONAME: << pipeline.trigger_parameters.gitlab.repo_name >>
  CIRCLE_BRANCH: << CIRCLE_BRANCH >>
  CIRCLE_WORKING_DIRECTORY: <<CIRCLE_WORKING_DIRECTORY>>
orbs:
  node: circleci/node@4.1
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    # Add parameter here
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:5}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-stack-<< parameters.Workflow_ID >>
            # aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name frontend-stack-<< parameters.Workflow_ID >>

  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws --version

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo apt-add-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl https://kvdb.io/CALzhBUmmPzdTRrQYKNfEh/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==${CIRCLE_WORKFLOW_ID:0:7} ));
            then
              cd ~/project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migrations:revert
              # exit 1
            fi

jobs:
  build-slack:
    machine: true
    steps:
      - run: echo "build form Slack"
      - slack/notify:
          branch_pattern: main
          event: fail
          template: basic_fail_1
      # - slack/notify:
      #     branch_pattern: production
      #     event: fail
      #     mentions: <@U8XXXXXXX>, @UserName
      #     template: basic_fail_1
  
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      # - run: ls
      # - run: cd frontend/frontend
      # - run: ls
      # - run: npm install
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd ./frontend
            npm install
            npm run build
            # exit 1
      # - run: ls
      # - run: npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            # Your code here
            cd ./backend
            npm install
            npm run build
            #  exit 1

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: build test
          command: |
            # Your code here
            cd ./frontend
            npm install
            npm run test
            # exit 1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            # Your code here
            cd ./backend
            npm install
            npm run test
            # exit 1

  notify:
    docker:
      - image: cimg/base:stable
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "CIRCLE_PROJECT_REPONAME  > $CIRCLE_PROJECT_REPONAME ",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan FE
          command: |
            # Your code here
            cd frontend

            npm install

            npm audit fix --force --audit-level=critical

            npm audit fix

            npm audit --audit-level=critical
            # exit 1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          command: |
            # Your code here
            cd ./backend

            npm install

            npm audit fix --force --audit-level=critical

            npm audit fix

            npm audit --audit-level=critical
            # exit 1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_awscli
      - run:
          name: Diags
          command: |
            pwd
            ls -la . ..
            printenv
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=backend \
              --stack-name backend-stack-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}
              # exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend \
              --stack-name frontend-stack-${CIRCLE_WORKFLOW_ID:0:5} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:5}
              # exit 1

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:5}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - run: ls

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      # install dependence
        # cli
      - install_awscli
        # ansible
      - install_ansible

      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["01:e3:11:e9:57:63:fc:1c:f9:99:49:83:bb:b0:dc:54"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            pwd
            ls -la . ..
            cd .circleci/ansible
            ls -la
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # - install_awscli
      - run:
          name: Run migrations
          command: |


            # Your code here
            cd backend
            touch .env
            echo NODE_ENV=local >> ".env"
            echo VERSION=1 >> ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"

            # Use these values for the local PG database from the Docker Compose file

            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=5432 >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=viet1997 >> ".env"
            echo TYPEORM_DATABASE=postgres >> ".env"

            echo $TYPEORM_USERNAME 
            echo $TYPEORM_HOST
            echo $TYPEORM_DATABASE


            npm install
            ## Run and save the migration output
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
            # exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            - run:
              name: Send migration status to kvdb.io OR memstash.io
              command: |   
                if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                  then
                    # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                    curl https://kvdb.io/CALzhBUmmPzdTRrQYKNfEh/migration_${CIRCLE_WORKFLOW_ID:0:7} \
                    -d ${CIRCLE_WORKFLOW_ID:0:7}
                  fi
            # exit 1
     # Here's where you will add some code to rollback on failure
      - destroy-environment
      - revert-migrations

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   smoke-test:
#     docker:
#       # Lightweight Docker image
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]

      # - deploy-infrastructure:
      #     # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [main]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      - run-migrations
          # requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]

      #  Slack configuraition
  # send-notification:
  #   jobs:
  #     - notify:
  #         context: vietContext

  #     event: fail
  #     mentions: '@EngineeringTeam'
  #     template: basic_fail_1
  # - slack/notify:
  #     event: pass
  #     template: success_tagged_deploy_1
